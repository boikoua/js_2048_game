{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.size = this.board.length;\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    addRandomTile() {\n        const emptyTiles = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyTiles.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyTiles.length > 0) {\n            const { row: row, col: col } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    moveLeft() {\n        let move = false;\n        for(let row = 0; row < this.size; row++){\n            const newRow = this.board[row].filter((value)=>value);\n            for(let col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                newRow[col] *= 2;\n                this.score += newRow[col];\n                newRow.splice(col + 1, 1);\n            }\n            while(newRow.length < this.size)newRow.push(0);\n            if (!this.board[row].every((value, index)=>value === newRow[index])) {\n                this.board[row] = newRow;\n                move = true;\n            }\n            if (move) {\n                this.addRandomTile();\n                this.checkGameOver();\n            }\n        }\n    }\n    moveRight() {\n        let move = false;\n        for(let row = 0; row < this.size; row++){\n            const newRow = this.board[row].filter((value)=>value).reverse();\n            for(let col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                newRow[col] *= 2;\n                this.score += newRow[col];\n                newRow.splice(col + 1, 1);\n            }\n            while(newRow.length < this.size)newRow.push(0);\n            newRow.reverse();\n            if (!this.board[row].every((value, index)=>value === newRow[index])) {\n                this.board[row] = newRow;\n                move = true;\n            }\n        }\n        if (move) {\n            this.addRandomTile();\n            this.checkGameOver();\n        }\n    }\n    moveUp() {\n        let move = false;\n        for(let col = 0; col < this.size; col++){\n            const newCol = [];\n            for(let row = 0; row < this.size; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let row = 0; row < newCol.length - 1; row++)if (newCol[row] === newCol[row + 1]) {\n                newCol[row] *= 2;\n                this.score += newCol[row];\n                newCol.splice(row + 1, 1);\n            }\n            while(newCol.length < this.size)newCol.push(0);\n            for(let row = 0; row < this.size; row++)if (this.board[row][col] !== newCol[row]) {\n                this.board[row][col] = newCol[row];\n                move = true;\n            }\n        }\n        if (move) {\n            this.addRandomTile();\n            this.checkGameOver();\n        }\n    }\n    moveDown() {\n        let move = false;\n        for(let col = 0; col < this.size; col++){\n            const newCol = [];\n            for(let row = 3; row >= 0; row--)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let row = 0; row < newCol.length - 1; row++)if (newCol[row] === newCol[row + 1]) {\n                newCol[row] *= 2;\n                this.score += newCol[row];\n                newCol.splice(row + 1, 1);\n            }\n            while(newCol.length < this.size)newCol.push(0);\n            newCol.reverse();\n            for(let row = 0; row < this.size; row++)if (this.board[row][col] !== newCol[row]) {\n                this.board[row][col] = newCol[row];\n                move = true;\n            }\n        }\n        if (move) {\n            this.addRandomTile();\n            this.checkGameOver();\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.score = 0;\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        return this.start();\n    }\n    checkGameOver() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            if (this.board[row][col] === 0) return;\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return;\n        }\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$updateUI() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    const score = $09e991522ca7e64e$var$game.getScore();\n    const statusGame = $09e991522ca7e64e$var$game.getStatus();\n    document.querySelector(\".game-score\").textContent = score;\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const cell = document.querySelector(`.field-row:nth-child(${row + 1}) .field-cell:nth-child(${col + 1})`);\n        cell.textContent = board[row][col] === 0 ? \"\" : board[row][col];\n        cell.className = `field-cell field-cell--${board[row][col]}`;\n    }\n    if (statusGame === \"playing\") $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    else if (statusGame === \"win\") {\n        $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n        document.querySelector(\".restart\").addEventListener(\"click\", ()=>{\n            $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        });\n    } else if (statusGame === \"lose\") {\n        $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n        document.querySelector(\".restart\").addEventListener(\"click\", ()=>{\n            $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        });\n    } else {\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateUI();\n    $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n    $09e991522ca7e64e$var$startBtn.classList.remove(\"start\");\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\n\n\n//# sourceMappingURL=index.265406a9.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startBtn = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nfunction updateUI() {\n  const board = game.getState();\n  const score = game.getScore();\n  const statusGame = game.getStatus();\n\n  document.querySelector('.game-score').textContent = score;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cell = document.querySelector(\n        `.field-row:nth-child(${row + 1}) .field-cell:nth-child(${col + 1})`,\n      );\n\n      cell.textContent = board[row][col] === 0 ? '' : board[row][col];\n      cell.className = `field-cell field-cell--${board[row][col]}`;\n    }\n  }\n\n  if (statusGame === 'playing') {\n    startMessage.classList.add('hidden');\n  } else if (statusGame === 'win') {\n    winMessage.classList.remove('hidden');\n\n    document.querySelector('.restart').addEventListener('click', () => {\n      winMessage.classList.add('hidden');\n    });\n  } else if (statusGame === 'lose') {\n    loseMessage.classList.remove('hidden');\n\n    document.querySelector('.restart').addEventListener('click', () => {\n      loseMessage.classList.add('hidden');\n    });\n  } else {\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  }\n}\n\nstartBtn.addEventListener('click', () => {\n  game.start();\n  updateUI();\n  startBtn.textContent = 'Restart';\n  startBtn.classList.add('restart');\n  startBtn.classList.remove('start');\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  updateUI();\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'idle';\n    this.size = this.board.length;\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyTiles.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyTiles.length > 0) {\n      const { row, col } =\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveLeft() {\n    let move = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const newRow = this.board[row].filter((value) => value);\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow.splice(col + 1, 1);\n        }\n      }\n\n      while (newRow.length < this.size) {\n        newRow.push(0);\n      }\n\n      if (!this.board[row].every((value, index) => value === newRow[index])) {\n        this.board[row] = newRow;\n        move = true;\n      }\n\n      if (move) {\n        this.addRandomTile();\n        this.checkGameOver();\n      }\n    }\n  }\n  moveRight() {\n    let move = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const newRow = this.board[row].filter((value) => value).reverse();\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow.splice(col + 1, 1);\n        }\n      }\n\n      while (newRow.length < this.size) {\n        newRow.push(0);\n      }\n\n      newRow.reverse();\n\n      if (!this.board[row].every((value, index) => value === newRow[index])) {\n        this.board[row] = newRow;\n        move = true;\n      }\n    }\n\n    if (move) {\n      this.addRandomTile();\n      this.checkGameOver();\n    }\n  }\n  moveUp() {\n    let move = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const newCol = [];\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let row = 0; row < newCol.length - 1; row++) {\n        if (newCol[row] === newCol[row + 1]) {\n          newCol[row] *= 2;\n          this.score += newCol[row];\n          newCol.splice(row + 1, 1);\n        }\n      }\n\n      while (newCol.length < this.size) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          this.board[row][col] = newCol[row];\n          move = true;\n        }\n      }\n    }\n\n    if (move) {\n      this.addRandomTile();\n      this.checkGameOver();\n    }\n  }\n  moveDown() {\n    let move = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const newCol = [];\n\n      for (let row = 3; row >= 0; row--) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let row = 0; row < newCol.length - 1; row++) {\n        if (newCol[row] === newCol[row + 1]) {\n          newCol[row] *= 2;\n          this.score += newCol[row];\n          newCol.splice(row + 1, 1);\n        }\n      }\n\n      while (newCol.length < this.size) {\n        newCol.push(0);\n      }\n\n      newCol.reverse();\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          this.board[row][col] = newCol[row];\n          move = true;\n        }\n      }\n    }\n\n    if (move) {\n      this.addRandomTile();\n      this.checkGameOver();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.score = 0;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    return this.start();\n  }\n\n  checkGameOver() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          return;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return;\n        }\n      }\n    }\n    this.status = 'lose';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","score","status","size","length","addRandomTile","emptyTiles","row","col","push","Math","floor","random","moveLeft","move","newRow","filter","value","splice","every","index","checkGameOver","moveRight","reverse","moveUp","newCol","moveDown","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$startBtn","document","querySelector","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$updateUI","statusGame","textContent","cell","className","classList","add","remove","addEventListener","e","key"],"version":3,"file":"index.265406a9.js.map"}